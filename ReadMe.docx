

Problem Description

Name: Cloth Simulation
Problem Statement: Implement cloth simulation using particle, spring-damper, and triangle. Under two step of physic simulation is compute forces, and integrate motion. 
Problem Specification: 
        Compute Force:  For each particle apply Gravity force.
		           For each spring-damper compute spring force then apply the force to 
                                   the two particles that this spring-damper connected to.
		           For each triangle compute aerodynamic force then apply the force to the 
 		           3 particles that form the triangle.
        Integrate Motion: For each particle apply Euler Integration.

User Interface Information

Name: SpringConstant
Description: stiffness of the spring

Name: DampingFactor
Description: spring velocity restriction

Name: RestLength
Description: spring length that need to maintain

Name: Air Blow (Z)
Description: the direction of air will blow on z axis

Name: Create Cloth
Description: Instantiate the Grid

Name: Exit
Description: quit the application

Name: Destroy
Description: destroy the cloth(Grid)

Name: Row
Description: number of row for particle

Name: Column
Description: number of column for particle
Name: Width
Description: the width of the cloth. How long the cloth would be

Name: Height
Description: the height of the cloth. How tall the cloth would be

Functions Information

File: ClothSimulation.cs
Class: ClothSimulation
Data members:
	Name: ParticlesPreb
	Description: the gameobject that will use to instantiate particle
Name: SpringsPreb
	Description: the gameobject that will use to instantiate spring-damper
	Name: TrianglePreb
	Description: the gameobject that will use to instantiate triangle
	Name: rows
	Description: number of rows the particle will spawn in 
	Name: cols
	Description: number of column the particle will spawn in
	Name: width
	Description: Entire width of cloth. Also, give the space between particles on row
	Name: height
	Description: Entire height of cloth. This also give the space between particles on column
	Name: clothgui
	Description: to access ClothGUI class data members
	Name: particles
	Description: a list to store particle
	Name: springDampers
	Description: a list to store spring-damper
	Name: triangles
	Description: a list to store triangle

Function: SetAnchor
Parameters: n/a
Description: Set 2 as a pin-point to hold up the cloth(Grid)
Return: n/a

Function: ClothSpawn
Parameters: n/a
Description: Instantiate the cloth(Grid) using particle, spring-damper, triangle and SetAnchor function
Return: n/a

Function: FixedUpdate
Parameters: n/a
Description: compute forces and integrate motion
Return: n/a

Function: Start
Parameters: n/a
Description: assign clothgui to GetComponent of class ClothGUI
Return: n/a

Function: DestroyCloth
Parameters: n/a
Description: destroy cloth at run time. All the lists assign to a new list. Also, reset InputField
Return: n/a

File: Particle.cs
Class: Particle
Data members
	Name: Position
	Description: use to get, and update particle world space position
	Name: Velocity
	Description: particle speed with direction
	Name: Force
	Description: using this force to calculate Acceleration from Newton’s Second Law
	Name: mass
	Description: weight of the particle
	Name: isAnchor
	Description: if the particle is anchor, no calculation on it

Function: EulerIntegration 
Parameters: n/a
Description: integrate particle motion by calculating acceleration with Newton’s second law then add it to the particle Velocity with the time that past by. Update particle position with that Velocity also with the time that past by. This calculation won’t apply to the particle that is anchor
Return: n/a

Function: Start
Parameter: n/a
Description: Zero out Velocity, and assign Position to this gameobject current position that this script attach to
Return: n/a 

File: SpringDamper.cs
Class: SpringDamper
Data members
	Name: SpringConstant
	Description: the coefficient to control the stiffness of the spring
	Name: DampingFactor
	Description: the coefficient to restrict the spring velocity so it won’t go crazy
	Name: RestLength
Description: the coefficient for spring length that need to be maintain
	Name: p1
	Description: the first particle that this spring connect to
	Name: p2
	Description: the second particle that this spring connect to

Function: SetSpring
Parameters: Particle _p1, Particle _p2
Description: _p1 and _p2 are the two particles that this spring connected to. Use _p1 and _p2 to get the information of which particle it is, then assign them to p1 and p2 data members
Return: n/a

Function: computeForce
Parameters: n/a
Description: Calculate spring force from the two particles that this spring connected to, then apply that force to the particles force
Return: n/a

Function: Update
Parameters: n/a
Description: update spring as the particle position change
Return: n/a

File: Triangle.cs
Class: Triangle
Data members
	Name: p1
Description: the first particle to form the triangle
Name: p2
Description: the second particle to form the triangle
Name: p3
Description: the third particle to form the triangle
Name: airVelocity
Description: air direction
Name: airDensity
Description: how strong the air will blow
Name: dragCoefficient
Description: how much the object will resist from the air

Function: Start
Parameters: n/a
Description: zero out airVelocity, assign airDensity to 1, and dragCoefficient to 0.5
Return: n/a

Function: makeTriangle
Parameters: Particle _p1, Particle _p2, Particle _p3
Description: _p1, _p2, and _p3 are the three particles that going to form the triangle. Takes in three particles to get the information of which particle belong to this triangle 
Return:n/a

Function: computeForce
Parameters: n/a
Description: computing aerodynamic force for the triangle, then apply for each particle force of the triangle
Return: n/a

File: Exit.cs
Class: Exit
Data members
	n/a

Function: exitApplication
Parameters: n/a
Description: quit the application
Return: n/a

File: ClothGUI.cs
Class: ClothGUI
Data members
	Name: SpringConstant
	Description: user can change the stiffness of the spring
Name: DampingFactor
	Description: user can change the velocity restriction of the spring
	Name: RestLength
	Description:  user can change the length of the spring that need to be maintain
	Name: AirBlow
	Description: user can put some air on the z axis
	Name: Exit
	Description: when this button press the application will quit
Name: createCloth
Description: spawn the cloth(Grid). Set all the sliders to active, and put the exit button to   bottom right corner
Name: DestroyCloth
	Description: destroy the cloth(Grid)
	Name: Row
	Description: to get the user input for rows
	Name: Column
	Description: to get the user input for cols
	Name: Width
	Description: to get the user input for width
	Name: Height
	Description: to get the user input for height
Function: Start
Parameters: n/a
Description: set all the GUI elements position depend on the screen width and height
Return: n/a

Function: moveExitToTheConner
Parameters: n/a
Description: set the Exit button position to the bottom right if the screen
Return: n/a

Function: moveExitBack
Parameters: n/a
Description: move the Exit button position back to it origin position
Return: n/a

Function: Update
Parameters: n/a
Description: Checking if the user input on the InputField. If user did, Create Cloth button is able to click . If user didn’t, Create Cloth button is disable
Return: n/a

Implementation
File: ClothSimulation.cs
using UnityEngine;
using System.Collections;
using System.Collections.Generic;

#Function: Start
#Parameters: n/a
#Description: assign clothgui to GetComponent of class ClothGUI
#Return: n/a
 void Start()
 {
       clothgui = GetComponent<ClothGUI>();
  }

#Function: FixedUpdate
#Parameters: n/a
#Description: compute forces and integrate motion
#Return: n/a
void FixedUpdate()
  {
       foreach (Particle o in particles)
       {
           if (o)
           {
               Vector3 gravityForce = new Vector3(0f, -9.8f, 0f) * o.mass;
               o.Force = gravityForce;
           }
       }
       foreach (SpringDamper s in springDampers)
       {
           if (s)
           {
               s.SpringConstant = clothgui.SpringConstant.value;
               s.DampingFactor = clothgui.DampingFactor.value;
               s.Restlength = clothgui.RestLength.value;
               s.computeForce();
           }
       }
       foreach (Triangle t in triangles)
       {
           if (t)
           {
               t.airVelocity.z = clothgui.AirBlow.value;
               t.computeForce();
           }
       {
       foreach (Particle o in particles)
       {
           if (o)
           { o.EulerIntegration(); }
       }
   }

#Function: DestroyCloth
#Parameters: n/a
#Description: destroy cloth at run time. All the lists assign to a new list. Also, reset InputField
#Return: n/a
 public void DestroyCloth()
    {
        foreach (Particle p in particles)
        {
            Destroy(p.gameObject);
        }
        foreach (SpringDamper s in springDampers)
        {
            Destroy(s.gameObject);
        }
        foreach (Triangle t in triangles)
        {
            Destroy(t.gameObject);
        }
        
        clothgui.Row.text = “”;
        clothgui.Column.text = “”;
        clothgui.Width.text = “”;
        clothgui.Height.text = “”;

        springDampers = new List<SpringDamper>();
        particles = new List<Particle>();
        triangles = new List<Triangle>();
    }

#Function: ClothSpawn
#Parameters: n/a
#Description: Instantiate the cloth(Grid) using particle, spring-damper, triangle and SetAnchor function
#Return: n/a
public void ClothSpawn()
{
	Particle particle;
	for (int i = 0; i < rows; ++i) 
	{
	        for (int j = 0; j < cols; ++j) 
	        {
		particle = Instantiate (ParticlesPreb);
		particle.transform.position = new Vector3 (i * width / rows, j * height / cols, 0);
                	particle.transform.parent = transform;
                	particles.Add (particle);
	          }
	  }
	for(int i = 0; i < rows * cols; ++i)
	{
		if (i + rows < rows * cols)
		{
			SpringDamper RowSpring = Instantiate(SpringsPreb);
                		RowSpring.transform.parent = transform;
            RowSpring.SetSpring(particles[i], particles[i + rows]);
            springDampers.Add(RowSpring);

			if((i % cols) != rows - 1)
			{
			         SpringDamper ColSpring = Instantiate(SpringsPreb);
                		         ColSpring.transform.parent = transform;
                     		         ColSpring.SetSpring(particles[i], particles[i + 1]);
                		         springDampers.Add(ColSpring);
			}
               
               		 if (i + 1 < rows * cols && i + rows < rows * cols)
			{
			         SpringDamper RightDSpring = Instantiate(SpringsPreb);
                    	         RightDSpring.transform.parent = transform;
                    	         RightDSpring.SetSpring(particles[i + 1], particles[i + rows]);
                    	         springDampers.Add(RightDSpring);
                		}
			
			if(i + rows + 1 < rows * cols)
			{
			         SpringDamper LeftDSpring = Instantiate(SpringsPreb);
                    		         LeftDSpring.transform.parent = transform;
                    		        LeftDSpring.SetSpring(particles[i], particles[i + rows + 1]);
                    		        springDampers.Add(LeftDSpring);
                		}			
	    	 }
        }

        for (int i = 0; i < rows * cols; ++i)
        {
            if (i + 1 < rows * cols && i + rows < rows * cols && i + rows + 1 < rows * cols)
            {
                Triangle firstTriangle = Instantiate(TrianglePreb);
                firstTriangle.transform.parent = transform;
                firstTriangle.makeTriangle(particles[i], particles[i + 1], particles[i + rows]);
                triangles.Add(firstTriangle);

                Triangle secondTriangle = Instantiate(TrianglePreb);
                secondTriangle.transform.parent = transform;
                secondTriangle.makeTriangle(particles[i], particles[i + 1], particles[i + rows + 1]);
                triangles.Add(secondTriangle);

                Triangle thirdTriangle = Instantiate(TrianglePreb);
                thirdTriangle.transform.parent = transform;
                thirdTriangle.makeTriangle(particles[i + 1], particles[i + rows], particles[i + rows +1]);
                triangles.Add(thirdTriangle);

                Triangle fourTriangle = Instantiate(TrianglePreb);
                fourTriangle.transform.parent = transform;
                fourTriangle.makeTriangle(particles[i], particles[i + rows], particles[i + rows + 1]);
                triangles.Add(fourTriangle);
            }
        }
        SetAnchor();
    }


#Function: SetAnchor
#Parameters: n/a
#Description: Set 2 as a pin-point to hold up the cloth(Grid)
#Return: n/a
 void SetAnchor()
    {
        particles[0].isAnchor = true;
        particles[rows * cols - cols].isAnchor = true;
    }

File: Particle.cs
Using UnityEngine;
Using System.Collections;

#Function: EulerIntegration 
#Parameters: n/a
#Description: integrate particle motion by calculating acceleration with Newton’s second law then add it to the particle Velocity with the time that past by. Update particle position with that Velocity also with the time that past by. This calculation won’t apply to the particle that is anchor
#Return: n/a
public void EulerIntegration()
{
        if (!isAnchor)
        {
            Vector3 Acceleration = Force / mass;
            Velocity += Acceleration * Time.deltaTime;
            Position += Velocity * Time.deltaTime;
        }
}

#Function: Start
#Parameter: n/a
#Description: Zero out Velocity, and assign Position to this gameobject current position that this script attach to
#Return: n/a 
void Start()
{
	Velocity = new Vector3 (0,0,0);
	Position = transform.position;
}

File: SpringDamper.cs
Using UnityEngine;
Using System.Collections;

#Function: SetSpring
#Parameters: Particle _p1, Particle _p2
#Description: _p1 and _p2 are the two particles that this spring connected to. Use _p1 and _p2 to get the information of which particle it is, then assign them to p1 and p2 data members
#Return: n/a
public void SetSpring(Particle _p1, Particle _p2)
{
        p1 = _p1;
        p2 = _p2;
}

#Function: computeForce
#Parameters: n/a
#Description: Calculate spring force from the two particles that this spring connected to, then apply that force to the particles force
#Return: n/a
public void computeForce()
{
	float particlesDistance = Vector3.Distance(p1.Position ,p2.Position);
	Vector3 particlesDiff = p2.Position - p1.Position;
	Vector3 normalizeParticlesDiff = particlesDiff.normalized;
		
	float springForce = - SpringConstant * (Restlength - particlesDistance);

	float particle1Vel = Vector3.Dot (normalizeParticlesDiff, p1.Velocity); 
	float particle2Vel = Vector3.Dot (normalizeParticlesDiff, p2.Velocity);

	float dampForce = - DampingFactor * (particle1Vel - particle2Vel);

	float springDamper = springForce + dampForce;

	Vector3 force1 = springDamper * normalizeParticlesDiff;
	Vector3 force2 = -force1;

	p1.Force += force1;
	p2.Force += force2;
}

#Function: Update
#Parameters: n/a
#Description: update spring as the particle position change
#Return: n/a
void Update()
{
LineRenderer spring = GetComponent<LineRenderer>();
spring.SetPosition(0, p1.Position);
spring.SetPosition(1, p2.Position);
}

File: Triangle.cs
using UnityEngine;
using System.Collections;

#Function: Start
#Parameters: n/a
#Description: zero out airVelocity, assign airDensity to 1, and dragCoefficient to 0.5
#Return: n/a
void Start()
{
        airVelocity = new Vector3(0, 0, 0);
        airDensity = 1f;
        dragCoefficient = 1f;
}

#Function: makeTriangle
#Parameters: Particle _p1, Particle _p2, Particle _p3
#Description: _p1, _p2, and _p3 are the three particles that going to form the triangle. Takes in three particles to get the information of which particle belong to this triangle 
#Return:n/a
public void makeTriangle(Particle _p1, Particle _p2, Particle _p3)
{
        p1 = _p1;
        p2 = _p2;
        p3 = _p3;
}

#Function: computeForce
#Parameters: n/a
#Description: computing aerodynamic force for the triangle, then apply for each particle force of the triangle
#Return: n/a

File: Exit.cs
using UnityEngine;
using System.Collections;

#Function: exitApplication
#Parameters: n/a
#Description: quit the application
#Return: n/a
public void exitApplication()
{
        Application.Quit();
}


File: ClothGUI.cs
using UnityEngine;
using UnityEngine.UI;
using System.Collections;

#Function: Start
#Parameters: n/a
#Description: set all the GUI elements position depend on the screen width and height
#Return: n/a
void Start ()
{
        DestroyCloth.GetComponent<RectTransform>().position = new Vector3(Screen.width * 
        0.85f, Screen.height * 0.9f, 0);
        CreateCloth.GetComponent<RectTransform>().position = new Vector3(Screen.width * 
        0.5f, Screen.height * 0.54f, 0);
        Exit.GetComponent<RectTransform>().position = new Vector3(Screen.width * 0.5f, 
        Screen.height * 0.44f, 0);
        RestLength.GetComponent<RectTransform>().position = new Vector3(Screen.width * 
        0.15f, Screen.height * 0.9f, 0);
        DampingFactor.GetComponent<RectTransform>().position = new Vector3(Screen.width 
        * 0.15f, Screen.height * 0.8f, 0);
        SpringConstant.GetComponent<RectTransform>().position = new Vector3(Screen.width        
        * 0.15f, Screen.height * 0.7f, 0);
        AirBlow.GetComponent<RectTransform>().position = new Vector3(Screen.width * 
        0.15f, Screen.height * 0.6f, 0);

         Row.GetComponent<RectTransform>().position = new Vector3(Screen.width * 0.3f, 
         Screen.height * 0.8f, 0);
        Column.GetComponent<RectTransform>().position = new Vector3(Screen.width * 
        0.42f, Screen.height * 0.8f, 0);
        Width.GetComponent<RectTransform>().position = new Vector3(Screen.width * 0.58f, 
        Screen.height * 0.8f, 0);
        Height.GetComponent<RectTransform>().position = new Vector3(Screen.width * 0.7f,  
        Screen.height * 0.8f, 0);

        CreateCloth.gameObject.SetActive(true);
        Exit.gameObject.SetActive(true);
}

#Function: moveExitToTheConner
#Parameters: n/a
#Description: set the Exit button position to the bottom right if the screen
#Return: n/a
public void moveExitToTheConner()
{
        Exit.GetComponent<RectTransform>().position = new Vector3(Screen.width * 0.85f, 
        Screen.height * 0.1f, 0);
}


#Function: moveExitBack
#Parameters: n/a
#Description: move the Exit button position back to it origin position
#Return: n/a
public void moveExitBack()
{
        Exit.GetComponent<RectTransform>().position = new Vector3(Screen.width * 0.5f, 
        Screen.height * 0.44f, 0);
}

#Function: Update
#Parameters: n/a
#Description: Checking if the user input on the InputField. If user did, Create Cloth button is able to click . If user didn’t, Create Cloth button is disable
#Return: n/a
void Update()
{
        if (Row.text != "" && Column.text != "" && Width.text != "" && Height.text != "")
        {
            CreateCloth.interactable = true;
        }
        else
            CreateCloth.interactable = false;
}