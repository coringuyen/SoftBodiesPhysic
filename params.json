{"name":"SoftBodiesPhysic","tagline":"","body":"#**Problem Description**\r\n**Name**: Cloth Simulation\r\n**Problem Statement**: Implement cloth simulation using particle, spring-damper, and triangle. Under two step of physic simulation is compute forces, and integrate motion. \r\nProblem Specification: \r\n        Compute Force:  For each particle apply Gravity force.\r\nFor each spring-damper compute spring force then apply the force to the two particles that this spring-damper connected to.\r\nFor each triangle compute aerodynamic force then apply the force to the 3 particles that form the triangle.\r\n        Integrate Motion: For each particle apply Euler Integration.\r\n\r\n#**User Interface Information**\r\nName: SpringConstant\r\nDescription: stiffness of the spring\r\n\r\nName: DampingFactor\r\nDescription: spring velocity restriction\r\n\r\nName: RestLength\r\nDescription: spring length that need to maintain\r\n\r\nName: Air Blow (Z)\r\nDescription: the direction of air will blow on z axis\r\n\r\nName: Create Cloth\r\nDescription: Instantiate the Grid\r\n\r\nName: Exit\r\nDescription: quit the application\r\n\r\nName: Destroy\r\nDescription: destroy the cloth(Grid)\r\n\r\nName: Row\r\nDescription: number of row for particle\r\n\r\nName: Column\r\nDescription: number of column for particle\r\n\r\nName: Width\r\nDescription: the width of the cloth. How long the cloth would be\r\n\r\nName: Height\r\nDescription: the height of the cloth. How tall the cloth would be\r\n\r\n#**Functions Information**\r\n\r\n**File**: ClothSimulation.cs\r\nClass: ClothSimulation\r\nData members:\r\n\tName: ParticlesPreb\r\n\tDescription: the gameobject that will use to instantiate particle\r\nName: SpringsPreb\r\n\tDescription: the gameobject that will use to instantiate spring-damper\r\n\tName: TrianglePreb\r\n\tDescription: the gameobject that will use to instantiate triangle\r\n\tName: rows\r\n\tDescription: number of rows the particle will spawn in \r\n\tName: cols\r\n\tDescription: number of column the particle will spawn in\r\n\tName: width\r\n\tDescription: Entire width of cloth. Also, give the space between particles on row\r\n\tName: height\r\n\tDescription: Entire height of cloth. This also give the space between particles on column\r\n\tName: clothgui\r\n\tDescription: to access ClothGUI class data members\r\n\tName: particles\r\n\tDescription: a list to store particle\r\n\tName: springDampers\r\n\tDescription: a list to store spring-damper\r\n\tName: triangles\r\n\tDescription: a list to store triangle\r\n\r\nFunction: SetAnchor\r\nParameters: n/a\r\nDescription: Set 2 as a pin-point to hold up the cloth(Grid)\r\nReturn: n/a\r\n\r\nFunction: ClothSpawn\r\nParameters: n/a\r\nDescription: Instantiate the cloth(Grid) using particle, spring-damper, triangle and SetAnchor function\r\nReturn: n/a\r\n\r\nFunction: FixedUpdate\r\nParameters: n/a\r\nDescription: compute forces and integrate motion\r\nReturn: n/a\r\n\r\nFunction: Start\r\nParameters: n/a\r\nDescription: assign clothgui to GetComponent of class ClothGUI\r\nReturn: n/a\r\n\r\nFunction: DestroyCloth\r\nParameters: n/a\r\nDescription: destroy cloth at run time. All the lists assign to a new list. Also, reset InputField\r\nReturn: n/a\r\n\r\n**File**: Particle.cs\r\nClass: Particle\r\nData members\r\n\tName: Position\r\n\tDescription: use to get, and update particle world space position\r\n\tName: Velocity\r\n\tDescription: particle speed with direction\r\n\tName: Force\r\n\tDescription: using this force to calculate Acceleration from Newton’s Second Law\r\n\tName: mass\r\n\tDescription: weight of the particle\r\n\tName: isAnchor\r\n\tDescription: if the particle is anchor, no calculation on it\r\n\r\nFunction: EulerIntegration \r\nParameters: n/a\r\nDescription: integrate particle motion by calculating acceleration with Newton’s second law then add it to the particle Velocity with the time that past by. Update particle position with that Velocity also with the time that past by. This calculation won’t apply to the particle that is anchor\r\nReturn: n/a\r\n\r\nFunction: Start\r\nParameter: n/a\r\nDescription: Zero out Velocity, and assign Position to this gameobject current position that this script attach to\r\nReturn: n/a \r\n\r\n**File**: SpringDamper.cs\r\nClass: SpringDamper\r\nData members\r\n\tName: SpringConstant\r\n\tDescription: the coefficient to control the stiffness of the spring\r\n\tName: DampingFactor\r\n\tDescription: the coefficient to restrict the spring velocity so it won’t go crazy\r\n\tName: RestLength\r\nDescription: the coefficient for spring length that need to be maintain\r\n\tName: p1\r\n\tDescription: the first particle that this spring connect to\r\n\tName: p2\r\n\tDescription: the second particle that this spring connect to\r\n\r\nFunction: SetSpring\r\nParameters: Particle _p1, Particle _p2\r\nDescription: _p1 and _p2 are the two particles that this spring connected to. Use _p1 and _p2 to get the information of which particle it is, then assign them to p1 and p2 data members\r\nReturn: n/a\r\n\r\nFunction: computeForce\r\nParameters: n/a\r\nDescription: Calculate spring force from the two particles that this spring connected to, then apply that force to the particles force\r\nReturn: n/a\r\n\r\nFunction: Update\r\nParameters: n/a\r\nDescription: update spring as the particle position change\r\nReturn: n/a\r\n\r\n**File**: Triangle.cs\r\nClass: Triangle\r\nData members\r\nName: p1\r\nDescription: the first particle to form the triangle\r\nName: p2\r\nDescription: the second particle to form the triangle\r\nName: p3\r\nDescription: the third particle to form the triangle\r\nName: airVelocity\r\nDescription: air direction\r\nName: airDensity\r\nDescription: how strong the air will blow\r\nName: dragCoefficient\r\nDescription: how much the object will resist from the air\r\n\r\nFunction: Start\r\nParameters: n/a\r\nDescription: zero out airVelocity, assign airDensity to 1, and dragCoefficient to 0.5\r\nReturn: n/a\r\n\r\nFunction: makeTriangle\r\nParameters: Particle _p1, Particle _p2, Particle _p3\r\nDescription: _p1, _p2, and _p3 are the three particles that going to form the triangle. Takes in three particles to get the information of which particle belong to this triangle \r\nReturn:n/a\r\n\r\nFunction: computeForce\r\nParameters: n/a\r\nDescription: computing aerodynamic force for the triangle, then apply for each particle force of the triangle\r\nReturn: n/a\r\n\r\n**File**: Exit.cs\r\nClass: Exit\r\nData members\r\n\tn/a\r\n\r\nFunction: exitApplication\r\nParameters: n/a\r\nDescription: quit the application\r\nReturn: n/a\r\n\r\n**File**: ClothGUI.cs\r\nClass: ClothGUI\r\nData members\r\n\tName: SpringConstant\r\n\tDescription: user can change the stiffness of the spring\r\n        Name: DampingFactor\r\n\tDescription: user can change the velocity restriction of the spring \r\n        Name: RestLength\r\n\tDescription:  user can change the length of the spring that need to be maintain\r\n        Name: AirBlow\r\n\tDescription: user can put some air on the z axis\r\nName: Exit\r\n\tDescription: when this button press the application will quit\r\nName: createCloth\r\nDescription: spawn the cloth(Grid). Set all the sliders to active, and put the exit button to   bottom right corner\r\nName: DestroyCloth\r\n\tDescription: destroy the cloth(Grid)\r\n\tName: Row\r\n\tDescription: to get the user input for rows\r\n\tName: Column\r\n\tDescription: to get the user input for cols\r\n\tName: Width\r\n\tDescription: to get the user input for width\r\n\tName: Height\r\n\tDescription: to get the user input for height\r\nFunction: Start\r\nParameters: n/a\r\nDescription: set all the GUI elements position depend on the screen width and height\r\nReturn: n/a\r\n\r\nFunction: moveExitToTheConner\r\nParameters: n/a\r\nDescription: set the Exit button position to the bottom right if the screen\r\nReturn: n/a\r\n\r\nFunction: moveExitBack\r\nParameters: n/a\r\nDescription: move the Exit button position back to it origin position\r\nReturn: n/a\r\n\r\nFunction: Update\r\nParameters: n/a\r\nDescription: Checking if the user input on the InputField. If user did, Create Cloth button is able to click . If user didn’t, Create Cloth button is disable\r\nReturn: n/a\r\n\r\n#**Implementation**\r\n**File**: ClothSimulation.cs\r\nusing UnityEngine;\r\nusing System.Collections;\r\nusing System.Collections.Generic;\r\n\r\nFunction: Start\r\nParameters: n/a\r\nDescription: assign clothgui to GetComponent of class ClothGUI\r\nReturn: n/a\r\nvoid Start()\r\n{\r\n    clothgui = GetComponent<ClothGUI>();\r\n}\r\n\r\nFunction: FixedUpdate\r\nParameters: n/a\r\nDescription: compute forces and integrate motion\r\nReturn: n/a\r\nvoid FixedUpdate()\r\n{\r\n    foreach (Particle o in particles)\r\n    {\r\n        if (o)\r\n        {\r\n            Vector3 gravityForce = new Vector3(0f, -9.8f, 0f) * o.mass;\r\n            o.Force = gravityForce;\r\n        }\r\n    }\r\n\r\n    foreach (SpringDamper s in springDampers)\r\n    {\r\n        if (s)\r\n        {\r\n            s.SpringConstant = clothgui.SpringConstant.value;\r\n            s.DampingFactor = clothgui.DampingFactor.value;\r\n            s.Restlength = clothgui.RestLength.value;\r\n            s.computeForce();\r\n        }\r\n    }\r\n\r\n    foreach (Triangle t in triangles)\r\n    {\r\n        if (t)\r\n        {\r\n            t.airVelocity.z = clothgui.AirBlow.value;\r\n            t.computeForce();\r\n        }\r\n    {\r\n\r\n    foreach (Particle o in particles)\r\n    {\r\n        if (o)\r\n        { o.EulerIntegration(); }\r\n    }\r\n}\r\n\r\nFunction: DestroyCloth\r\nParameters: n/a\r\nDescription: destroy cloth at run time. All the lists assign to a new list. Also, reset InputField\r\nReturn: n/a\r\npublic void DestroyCloth()\r\n{\r\n     foreach (Particle p in particles)\r\n     {\r\n         Destroy(p.gameObject);\r\n     }\r\n\r\n     foreach (SpringDamper s in springDampers)\r\n     {\r\n         Destroy(s.gameObject);\r\n     }\r\n\r\n     foreach (Triangle t in triangles)\r\n     {\r\n         Destroy(t.gameObject);\r\n     }\r\n        \r\n     clothgui.Row.text = “”;\r\n     clothgui.Column.text = “”;\r\n     clothgui.Width.text = “”;\r\n     clothgui.Height.text = “”;\r\n\r\n     springDampers = new List<SpringDamper>();\r\n     particles = new List<Particle>();\r\n     triangles = new List<Triangle>();\r\n}\r\n\r\nFunction: ClothSpawn\r\nParameters: n/a\r\nDescription: Instantiate the cloth(Grid) using particle, spring-damper, triangle and SetAnchor function\r\nReturn: n/a\r\npublic void ClothSpawn()\r\n{\r\n    Particle particle;\r\n    for (int i = 0; i < rows; ++i) \r\n    {\r\n\tfor (int j = 0; j < cols; ++j) \r\n\t{\r\n            particle = Instantiate (ParticlesPreb);\r\n\t    particle.transform.position = new Vector3 (i * width / rows, j * height / cols, 0);\r\n            particle.transform.parent = transform;\r\n            particles.Add (particle);\r\n\t}\r\n     }\r\n\r\n     for(int i = 0; i < rows * cols; ++i)\r\n     {\r\n\tif (i + rows < rows * cols)\r\n\t{\r\n\t    SpringDamper RowSpring = Instantiate(SpringsPreb);\r\n            RowSpring.transform.parent = transform;\r\n            RowSpring.SetSpring(particles[i], particles[i + rows]);\r\n            springDampers.Add(RowSpring);\r\n\r\n\t    if((i % cols) != rows - 1)\r\n\t    {\r\n\t        SpringDamper ColSpring = Instantiate(SpringsPreb);\r\n                ColSpring.transform.parent = transform;\r\n                ColSpring.SetSpring(particles[i], particles[i + 1]);\r\n                springDampers.Add(ColSpring);\r\n\t    }\r\n               \r\n            if (i + 1 < rows * cols && i + rows < rows * cols)\r\n            {\r\n\t        SpringDamper RightDSpring = Instantiate(SpringsPreb);\r\n                RightDSpring.transform.parent = transform;\r\n                RightDSpring.SetSpring(particles[i + 1], particles[i + rows]);\r\n                springDampers.Add(RightDSpring);\r\n            }\r\n\t\t\t\r\n\t    if(i + rows + 1 < rows * cols)\r\n\t    {\r\n\t\tSpringDamper LeftDSpring = Instantiate(SpringsPreb);\r\n                LeftDSpring.transform.parent = transform;\r\n                LeftDSpring.SetSpring(particles[i], particles[i + rows + 1]);\r\n                springDampers.Add(LeftDSpring);\r\n            }\t\t\t\r\n\t }\r\n      }\r\n\r\n      for (int i = 0; i < rows * cols; ++i)\r\n      {\r\n          if (i + 1 < rows * cols && i + rows < rows * cols && i + rows + 1 < rows * cols)\r\n          {\r\n              Triangle firstTriangle = Instantiate(TrianglePreb);\r\n              firstTriangle.transform.parent = transform;\r\n              firstTriangle.makeTriangle(particles[i], particles[i + 1], particles[i + rows]);\r\n              triangles.Add(firstTriangle);\r\n\r\n              Triangle secondTriangle = Instantiate(TrianglePreb);\r\n              secondTriangle.transform.parent = transform;\r\n              secondTriangle.makeTriangle(particles[i], particles[i + 1], particles[i + rows + 1]);\r\n              triangles.Add(secondTriangle);\r\n\r\n              Triangle thirdTriangle = Instantiate(TrianglePreb);\r\n              thirdTriangle.transform.parent = transform;\r\n              thirdTriangle.makeTriangle(particles[i + 1], particles[i+rows], particles[i+rows+1]);\r\n              triangles.Add(thirdTriangle);\r\n\r\n              Triangle fourTriangle = Instantiate(TrianglePreb);\r\n              fourTriangle.transform.parent = transform;\r\n              fourTriangle.makeTriangle(particles[i], particles[i+rows], particles[i + rows + 1]);\r\n              triangles.Add(fourTriangle);\r\n          }\r\n      }\r\n\r\n        SetAnchor();\r\n\r\n}\r\n\r\n\r\nFunction: SetAnchor\r\nParameters: n/a\r\nDescription: Set 2 as a pin-point to hold up the cloth(Grid)\r\nReturn: n/a\r\nvoid SetAnchor()\r\n{\r\n    particles[0].isAnchor = true;\r\n    particles[rows * cols - cols].isAnchor = true;\r\n}\r\n\r\n**File**: Particle.cs\r\nUsing UnityEngine;\r\nUsing System.Collections;\r\n\r\nFunction: EulerIntegration \r\nParameters: n/a\r\nDescription: integrate particle motion by calculating acceleration with Newton’s second law then add it to the particle Velocity with the time that past by. Update particle position with that Velocity also with the time that past by. This calculation won’t apply to the particle that is anchor\r\nReturn: n/a\r\npublic void EulerIntegration()\r\n{\r\n    if (!isAnchor)\r\n    {\r\n        Vector3 Acceleration = Force / mass;\r\n        Velocity += Acceleration * Time.deltaTime;\r\n        Position += Velocity * Time.deltaTime;\r\n    }\r\n}\r\n\r\nFunction: Start\r\nParameter: n/a\r\nDescription: Zero out Velocity, and assign Position to this gameobject current position that this script attach to\r\nReturn: n/a \r\nvoid Start()\r\n{\r\n    Velocity = new Vector3 (0,0,0);\r\n    Position = transform.position;\r\n}\r\n\r\n**File**: SpringDamper.cs\r\nUsing UnityEngine;\r\nUsing System.Collections;\r\n\r\nFunction: SetSpring\r\nParameters: Particle _p1, Particle _p2\r\nDescription: _p1 and _p2 are the two particles that this spring connected to. Use _p1 and _p2 to get the information of which particle it is, then assign them to p1 and p2 data members\r\nReturn: n/a\r\npublic void SetSpring(Particle _p1, Particle _p2)\r\n{\r\n    p1 = _p1;\r\n    p2 = _p2;\r\n}\r\n\r\nFunction: computeForce\r\nParameters: n/a\r\nDescription: Calculate spring force from the two particles that this spring connected to, then apply that force to the particles force\r\nReturn: n/a\r\npublic void computeForce()\r\n{\r\n    float particlesDistance = Vector3.Distance(p1.Position ,p2.Position);\r\n    Vector3 particlesDiff = p2.Position - p1.Position;\r\n    Vector3 normalizeParticlesDiff = particlesDiff.normalized;\r\n\t\t\r\n    float springForce = - SpringConstant * (Restlength - particlesDistance);\r\n\r\n    float particle1Vel = Vector3.Dot (normalizeParticlesDiff, p1.Velocity); \r\n    float particle2Vel = Vector3.Dot (normalizeParticlesDiff, p2.Velocity);\r\n\r\n    float dampForce = - DampingFactor * (particle1Vel - particle2Vel);\r\n\r\n    float springDamper = springForce + dampForce;\r\n\r\n    Vector3 force1 = springDamper * normalizeParticlesDiff;\r\n    Vector3 force2 = -force1;\r\n\r\n    p1.Force += force1;\r\n    p2.Force += force2;\r\n}\r\n\r\nFunction: Update\r\nParameters: n/a\r\nDescription: update spring as the particle position change\r\nReturn: n/a\r\nvoid Update()\r\n{\r\n    LineRenderer spring = GetComponent<LineRenderer>();\r\n    spring.SetPosition(0, p1.Position);\r\n    spring.SetPosition(1, p2.Position);\r\n}\r\n\r\n**File**: Triangle.cs\r\nusing UnityEngine;\r\nusing System.Collections;\r\n\r\nFunction: Start\r\nParameters: n/a\r\nDescription: zero out airVelocity, assign airDensity to 1, and dragCoefficient to 0.5\r\nReturn: n/a\r\nvoid Start()\r\n{\r\n   airVelocity = new Vector3(0, 0, 0);\r\n   airDensity = 1f;\r\n   dragCoefficient = 1f;\r\n}\r\n\r\nFunction: makeTriangle\r\nParameters: Particle _p1, Particle _p2, Particle _p3\r\nDescription: _p1, _p2, and _p3 are the three particles that going to form the triangle. Takes in three particles to get the information of which particle belong to this triangle \r\nReturn:n/a\r\npublic void makeTriangle(Particle _p1, Particle _p2, Particle _p3)\r\n{\r\n   p1 = _p1;\r\n   p2 = _p2;\r\n   p3 = _p3;\r\n}\r\n\r\nFunction: computeForce\r\nParameters: n/a\r\nDescription: computing aerodynamic force for the triangle, then apply for each particle force of the triangle\r\nReturn: n/a\r\npublic void computeForce()\r\n{\r\n    Vector3 part1 = p2.Position - p1.Position;\r\n    Vector3 part2 = p3.Position - p1.Position;\r\n\r\n    Vector3 averageVel = (p1.Velocity + p2.Velocity + p3.Velocity) / 3;\r\n    averageVel -= airVelocity;\r\n\r\n    Vector3 crossProductof3points = Vector3.Cross(part1, part2);\r\n    Vector3 Trianglenormal = crossProductof3points / crossProductof3points.magnitude;\r\n\r\n    Vector3 v2_an = ((0.5f * Vector3.Dot(averageVel, Trianglenormal) * \r\n    averageVel.magnitude) / crossProductof3points.magnitude) * crossProductof3points;\r\n        \r\n    Vector3 aeroForce = -0.5f * airDensity * dragCoefficient * v2_an;\r\n\r\n    aeroForce /= 3f;\r\n\r\n    p1.Force += aeroForce;\r\n    p2.Force += aeroForce;\r\n    p3.Force += aeroForce;\r\n}\r\n\r\n**File**: Exit.cs\r\nusing UnityEngine;\r\nusing System.Collections;\r\n\r\nFunction: exitApplication\r\nParameters: n/a\r\nDescription: quit the application\r\nReturn: n/a\r\npublic void exitApplication()\r\n{\r\n   Application.Quit();\r\n}\r\n\r\n\r\n**File**: ClothGUI.cs\r\nusing UnityEngine;\r\nusing UnityEngine.UI;\r\nusing System.Collections;\r\n\r\nFunction: Start\r\nParameters: n/a\r\nDescription: set all the GUI elements position depend on the screen width and height\r\nReturn: n/a\r\nvoid Start ()\r\n{\r\n    DestroyCloth.GetComponent<RectTransform>().position = new Vector3(Screen.width * \r\n    0.85f, Screen.height * 0.9f, 0);\r\n    CreateCloth.GetComponent<RectTransform>().position = new Vector3(Screen.width * \r\n    0.5f, Screen.height * 0.54f, 0);\r\n    Exit.GetComponent<RectTransform>().position = new Vector3(Screen.width * 0.5f, \r\n    Screen.height * 0.44f, 0);\r\n    RestLength.GetComponent<RectTransform>().position = new Vector3(Screen.width * \r\n    0.15f, Screen.height * 0.9f, 0);\r\n    DampingFactor.GetComponent<RectTransform>().position = new Vector3(Screen.width * \r\n    0.15f, Screen.height * 0.8f, 0);\r\n    SpringConstant.GetComponent<RectTransform>().position = new Vector3(Screen.width * \r\n    0.15f, Screen.height * 0.7f, 0);\r\n    AirBlow.GetComponent<RectTransform>().position = new Vector3(Screen.width * 0.15f, \r\n    Screen.height * 0.6f, 0);\r\n\r\n    Row.GetComponent<RectTransform>().position = new Vector3(Screen.width * 0.3f, \r\n    Screen.height * 0.8f, 0);\r\n    Column.GetComponent<RectTransform>().position = new Vector3(Screen.width * 0.42f, \r\n    Screen.height * 0.8f, 0);\r\n    Width.GetComponent<RectTransform>().position = new Vector3(Screen.width * 0.58f, \r\n    Screen.height * 0.8f, 0);\r\n    Height.GetComponent<RectTransform>().position = new Vector3(Screen.width * 0.7f,  \r\n    Screen.height * 0.8f, 0);\r\n\r\n    CreateCloth.gameObject.SetActive(true);\r\n    Exit.gameObject.SetActive(true);\r\n}\r\n\r\nFunction: moveExitToTheConner\r\nParameters: n/a\r\nDescription: set the Exit button position to the bottom right if the screen\r\nReturn: n/a\r\npublic void moveExitToTheConner()\r\n{\r\n    Exit.GetComponent<RectTransform>().position = new Vector3(Screen.width * 0.85f, \r\n    Screen.height * 0.1f, 0);\r\n}\r\n\r\n\r\nFunction: moveExitBack\r\nParameters: n/a\r\nDescription: move the Exit button position back to it origin position\r\nReturn: n/a\r\npublic void moveExitBack()\r\n{\r\n    Exit.GetComponent<RectTransform>().position = new Vector3(Screen.width * 0.5f, \r\n    Screen.height * 0.44f, 0);\r\n}\r\n\r\nFunction: Update\r\nParameters: n/a\r\nDescription: Checking if the user input on the InputField. If user did, Create Cloth button is able to click . If user didn’t, Create Cloth button is disable\r\nReturn: n/a\r\nvoid Update()\r\n{\r\n    if (Row.text != \"\" && Column.text != \"\" && Width.text != \"\" && Height.text != \"\")\r\n    {\r\n        CreateCloth.interactable = true;\r\n    }\r\n    else\r\n        CreateCloth.interactable = false;\r\n}","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}